{"version":3,"file":"index.modern.js","sources":["../src/mui-sleazebox/FlexBox.tsx"],"sourcesContent":["import React, {useMemo} from 'react'\nimport {\n  Box,\n  Theme,\n  createStyles,\n  makeStyles,\n  useTheme,\n  BoxProps\n} from '@material-ui/core'\nimport clsx from 'clsx'\nimport {\n  Breakpoint,\n  BreakpointValues\n} from '@material-ui/core/styles/createBreakpoints'\n\ntype EnhancedFlexProp =\n  | BoxProps['flex']\n  | boolean\n  | 'grow'\n  | 'nogrow'\n  | 'noshrink'\n\ntype Props = {\n  flexSpacing?: number\n  wrapSpacing?: number\n  children?: React.ReactNode\n  child?: boolean\n  flex?: EnhancedFlexProp\n} & Omit<BoxProps, 'flex'>\n\ntype RowBoxUseStylesProps = {\n  flexSpacing?: number\n  wrapSpacing?: number\n  halfRespSpacing?: boolean\n  respBreakAt: Breakpoint\n  respElseAt: Breakpoint\n}\ntype ColBoxUseStylesProps = {flexSpacing?: number}\nexport type RowBoxProps = Props & {\n  responsive?: boolean | Breakpoint\n  halfRespSpacing?: boolean\n}\nexport type ChildBoxProps = {\n  children?: React.ReactNode\n  flex?: EnhancedFlexProp\n} & BoxProps\nexport type {Props as FlexBoxProps}\nexport type {Props as ColumnBoxProps}\n\n/*\n  Note, using a dynamic className such as useFlexSpacing did not work when applying specificity with a selector such as '&$useFlexSpacing'. Note sure why, but the workaround is to simply apply the className as a string.\n\n  [TODO] Using flexSpacing with <RowBox responsive/> is very opinionated with it's current setup. It assumes the same top and left margin will be used with Flex Column and Flex Row layouts respectively. In addition, generally, using flexWrap with <RowBox responsive/> will be avoided due to use of top margin's with <ChildBox/>. The workaround in both cases is to simply not use <RowBox responsive/> and use\n   <RowBox flexDirection={{xs: 'column', sm: 'row'}} /> with custom top margins passed in as props while using the flexSpacing prop to control left margins.\n*/\n\n/*\n  See links for more info:\n  https://www.w3schools.com/cssref/css3_pr_flex.asp\n  Useful terminology/abbreviations from https://github.com/angular/flex-layout/wiki/fxFlex-API\n  alias \t    Equivalent CSS:\n  initial \t  flex: 0 1 auto\n  auto \t      flex: <grow> <shrink> 100%\n  none \t      flex: 0 0 auto\n  grow \t      flex: 1 1 100%\n  nogrow \t    flex: 0 1 auto\n  noshrink \t  flex: 1 0 auto\n*/\n\nconst useEnhancedFlexProp = (flexProp: EnhancedFlexProp): BoxProps['flex'] => {\n  const flex = useMemo(() => {\n    switch (flexProp) {\n      case true:\n        return 'auto' // Or '1 1 auto'\n      case false:\n        return '0 0 auto' // Or 'none'\n      case 'grow':\n        return '1 1 100%'\n      case 'nogrow':\n        return '0 1 auto' // Or 'initial'\n      case 'noshrink':\n        return '1 0 auto'\n      default:\n        return flexProp\n    }\n  }, [flexProp])\n\n  return flex\n}\n\nconst useRowBoxStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    respRowBox: ({\n      flexSpacing,\n      wrapSpacing,\n      halfRespSpacing,\n      respBreakAt,\n      respElseAt\n    }: RowBoxUseStylesProps) => ({\n      [theme.breakpoints.down(respBreakAt)]: {\n        ...(typeof flexSpacing === 'number' && {\n          marginTop:\n            theme.spacing(flexSpacing) * -1 * (halfRespSpacing ? 0.5 : 1),\n          '& > .flexBox__child': {\n            marginTop: theme.spacing(flexSpacing) * (halfRespSpacing ? 0.5 : 1)\n            // This bit is redundant with Column layout\n            // ...(flexWrap && {\n            //   marginTop: theme.spacing(flexSpacing)\n            // })\n          }\n        })\n      },\n      [theme.breakpoints.up(respElseAt)]: {\n        ...(typeof flexSpacing === 'number' && {\n          marginLeft: theme.spacing(flexSpacing) * -1\n        }),\n        ...(typeof wrapSpacing === 'number' && {\n          marginTop: theme.spacing(wrapSpacing * -1)\n        }),\n        '& > .flexBox__child': {\n          ...(typeof flexSpacing === 'number' && {\n            marginLeft: theme.spacing(flexSpacing)\n          }),\n          ...(typeof wrapSpacing === 'number' && {\n            marginTop: theme.spacing(wrapSpacing)\n          })\n        }\n      }\n    }),\n    rowBox: ({flexSpacing, wrapSpacing}: RowBoxUseStylesProps) => ({\n      ...(typeof flexSpacing === 'number' && {\n        marginLeft: theme.spacing(flexSpacing) * -1\n      }),\n      ...(typeof wrapSpacing === 'number' && {\n        marginTop: theme.spacing(wrapSpacing * -1)\n      }),\n      '& > .flexBox__child': {\n        ...(typeof flexSpacing === 'number' && {\n          marginLeft: theme.spacing(flexSpacing)\n        }),\n        ...(typeof wrapSpacing === 'number' && {\n          marginTop: theme.spacing(wrapSpacing)\n        })\n      }\n    })\n  })\n)\n\nconst useColBoxStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    colBox: ({flexSpacing}: ColBoxUseStylesProps) => ({\n      ...(typeof flexSpacing === 'number' && {\n        marginTop: theme.spacing(flexSpacing) * -1,\n        '& > .flexBox__child': {\n          marginTop: theme.spacing(flexSpacing)\n        }\n      })\n    })\n  })\n)\n\nconst EnhancedBox = ({children, flex: flexProp, ...rest}: Props) => {\n  const flex = useEnhancedFlexProp(flexProp)\n  return (\n    <Box flex={flex} {...rest}>\n      {children}\n    </Box>\n  )\n}\n\nconst FlexBox = ({\n  children,\n  child = false,\n  className: classNameProp,\n  ...rest\n}: Props) => {\n  return (\n    <EnhancedBox\n      display=\"flex\"\n      className={clsx([{['flexBox__child']: child}, classNameProp])}\n      {...rest}\n    >\n      {children}\n    </EnhancedBox>\n  )\n}\n\nconst RowBox = ({\n  children,\n  flexSpacing,\n  halfRespSpacing = true,\n  className: classNameProp,\n  responsive = false,\n  flexWrap,\n  wrapSpacing: wrapSpacingProp,\n  ...rest\n}: RowBoxProps) => {\n  const respBreakAt = useMemo(\n    () => (!responsive || responsive === true ? 'xs' : responsive),\n    [responsive]\n  )\n  const theme = useTheme()\n  const breakpoints = useMemo(\n    () =>\n      // For typescript reference see https://fettblog.eu/typescript-better-object-keys\n      Object.keys(theme.breakpoints.values)\n        .map((k) => ({\n          key: k as keyof BreakpointValues,\n          value: theme.breakpoints.values[k as keyof BreakpointValues]\n        }))\n        .sort((a, b) => a.value - b.value),\n    [theme]\n  )\n  const respElseAt = useMemo(() => {\n    const idx = breakpoints.findIndex((a) => a.key === respBreakAt)\n    return breakpoints[idx + 1].key\n  }, [breakpoints, respBreakAt])\n\n  const isFlexWrap = flexWrap === 'wrap'\n  const wrapSpacing = !isFlexWrap\n    ? undefined\n    : typeof wrapSpacingProp === 'number'\n    ? wrapSpacingProp\n    : flexSpacing\n\n  const classes = useRowBoxStyles({\n    flexSpacing,\n    respBreakAt,\n    respElseAt,\n    wrapSpacing,\n    halfRespSpacing\n  })\n\n  const flexDirection = useMemo(() => {\n    switch (responsive) {\n      case false:\n        return 'row'\n      case true:\n      case 'xs':\n        return {xs: 'column', sm: 'row'}\n      case 'sm':\n        return {xs: 'column', md: 'row'}\n      case 'md':\n        return {xs: 'column', lg: 'row'}\n      case 'lg':\n        return {xs: 'column', xl: 'row'}\n      default:\n        return 'row'\n    }\n  }, [responsive])\n\n  return (\n    <FlexBox\n      flexDirection={flexDirection}\n      className={clsx([\n        {\n          [classes.respRowBox]: responsive,\n          [classes.rowBox]: !responsive\n        },\n        classNameProp\n      ])}\n      flexWrap={flexWrap}\n      {...rest}\n    >\n      {children}\n    </FlexBox>\n  )\n}\n\nconst ColumnBox = ({\n  children,\n  flexSpacing,\n  className: classNameProp,\n  ...rest\n}: Props) => {\n  const classes = useColBoxStyles({flexSpacing})\n  return (\n    <FlexBox\n      flexDirection=\"column\"\n      className={clsx([classes.colBox, classNameProp])}\n      {...rest}\n    >\n      {children}\n    </FlexBox>\n  )\n}\n\nconst ChildBox = ({\n  children,\n  className: classNameProp,\n  ...rest\n}: ChildBoxProps) => {\n  return (\n    <EnhancedBox className={clsx(['flexBox__child', classNameProp])} {...rest}>\n      {children}\n    </EnhancedBox>\n  )\n}\n\nexport {RowBox, ColumnBox, ChildBox, FlexBox}\nexport default FlexBox\n"],"names":["useRowBoxStyles","makeStyles","theme","createStyles","respRowBox","flexSpacing","wrapSpacing","halfRespSpacing","respBreakAt","respElseAt","[object Object]","breakpoints","down","marginTop","spacing","& > .flexBox__child","up","marginLeft","rowBox","useColBoxStyles","colBox","EnhancedBox","_ref","children","flex","flexProp","rest","useMemo","useEnhancedFlexProp","React","Box","FlexBox","_ref2","child","className","classNameProp","display","clsx","flexBox__child","RowBox","_ref3","responsive","flexWrap","wrapSpacingProp","useTheme","Object","keys","values","map","k","key","value","sort","a","b","idx","findIndex","classes","undefined","flexDirection","xs","sm","md","lg","xl","ColumnBox","_ref4","ChildBox","_ref5"],"mappings":"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"}